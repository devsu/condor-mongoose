syntax = "proto3";

package smartmate;

message Sort {
  string field = 1;
  int32 value = 2;
}

enum Matcher {
  STRING = 0;
  REGEX = 1;
  OBJECT = 2;
}

message Where {
  string field = 1;
  string value = 2;
  Matcher matcher = 3;
}

message QueryRequest {
  // 'where' will be a serialized JSON object. Generally it's not recommended,
  // but seems to be the most pragmatic way for this use case.
  // See https://github.com/grpc/grpc/issues/8432
  repeated Where where = 1; // empty => all
  repeated string fields = 2; // empty => all
  int32 limit = 3; // 0 => unlimited
  int32 skip = 4;  // 0 => none
  repeated Sort sort = 5;
  repeated string populate = 6;
}

message GetRequest {
  string id = 1;
  repeated string populate = 2;
}

message ModelUpdate {
  string id = 1;
  repeated string fields = 2;
  Model data = 3;
}

message AlternativeModelUpdate {
  string id = 1;
  repeated string fields = 2;
  AlternativeModel data = 3;
}

message RelatedModel {
  string id = 1;
  string name = 2;
  string model = 3;
}

message RelatedModelRequest {
  string id = 1;
  string relatedModelId = 2;
}

message Child {
  string id = 1;
  string name = 2;
}

message ChildRequest {
  string id = 1;
  Child child = 2;
}

message ChildrenRequest {
  string id = 1;
  repeated Child children = 2;
}

message RelatedModelsRequest {
  string id = 1;
  repeated RelatedModel relatedModels = 2;
}

message Model {
  string id = 1;
  string name = 2;
  int32 age = 3;
  bool married = 4;
  // subdocuments (embeded schema)
  repeated Child children = 5;
  Child subDoc = 6;
  repeated string tags = 7;
  // related documents (another schema)
  repeated RelatedModel virtualRelatedModels = 8;
  repeated RelatedModel relatedModels = 9;
}

message Models {
  repeated Model models = 1;
}

message AlternativeModel {
  string id = 1;
  string name = 2;
  int32 age = 3;
  bool married = 4;
  // subdocuments (embeded schema)
  repeated Child child = 5;
  repeated string tags = 6;
  // related documents (another schema)
  repeated RelatedModel relatedModel = 7;
}

message AlternativeModels {
  repeated AlternativeModel models = 1;
}

message Empty {}

message IdRequest {
  string id = 1;
}

service SamplesService {
  rpc List (QueryRequest) returns (Models) {}
  rpc Insert (Model) returns (Model) {}
  rpc Update (ModelUpdate) returns (Model) {}
  rpc Get (GetRequest) returns (Model) {}
  rpc Delete (IdRequest) returns (Empty) {}

  rpc AddChild (ChildRequest) returns (Empty) {}
  rpc RemoveChild (ChildRequest) returns (Empty) {}

  rpc AddRelatedModel (RelatedModelRequest) returns (Empty) {}
  rpc RemoveRelatedModel (RelatedModelRequest) returns (Empty) {}

  rpc PushChildren (ChildrenRequest) returns (Empty) {}
  rpc AddToSetChildren (ChildrenRequest) returns (Empty) {}
  rpc RemoveChildren (ChildrenRequest) returns (Empty) {}
  rpc UpdateChildren (ChildrenRequest) returns (Empty) {}
  rpc ReplaceChildren (ChildrenRequest) returns (Empty) {}

  rpc PushRelatedModels (RelatedModelsRequest) returns (Empty) {}
  rpc AddToSetRelatedModels (RelatedModelsRequest) returns (Empty) {}
  rpc RemoveRelatedModels (RelatedModelsRequest) returns (Empty) {}
  rpc ReplaceRelatedModels (RelatedModelsRequest) returns (Empty) {}
}

service AlternativeService {
  rpc List (QueryRequest) returns (AlternativeModels) {}
  rpc Insert (AlternativeModel) returns (AlternativeModel) {}
  rpc Update (ModelUpdate) returns (AlternativeModel) {}
  rpc Get (GetRequest) returns (AlternativeModel) {}
  rpc Delete (IdRequest) returns (Empty) {}

  rpc AddChild (ChildRequest) returns (Empty) {}
  rpc RemoveChild (ChildRequest) returns (Empty) {}

  rpc AddRelatedModel (RelatedModelRequest) returns (Empty) {}
  rpc RemoveRelatedModel (RelatedModelRequest) returns (Empty) {}

  rpc PushChildren (ChildrenRequest) returns (Empty) {}
  rpc AddToSetChildren (ChildrenRequest) returns (Empty) {}
  rpc RemoveChildren (ChildrenRequest) returns (Empty) {}
  rpc UpdateChildren (ChildrenRequest) returns (Empty) {}
  rpc ReplaceChildren (ChildrenRequest) returns (Empty) {}

  rpc PushRelatedModels (RelatedModelsRequest) returns (Empty) {}
  rpc AddToSetRelatedModels (RelatedModelsRequest) returns (Empty) {}
  rpc RemoveRelatedModels (RelatedModelsRequest) returns (Empty) {}
  rpc ReplaceRelatedModels (RelatedModelsRequest) returns (Empty) {}
}
